package org.setms.sew.intellij;

import com.intellij.extapi.psi.ASTWrapperPsiElement;
import com.intellij.lang.ASTNode;
import com.intellij.lang.ParserDefinition;
import com.intellij.lang.PsiParser;
import com.intellij.lexer.FlexAdapter;
import com.intellij.lexer.Lexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.FileViewProvider;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.IFileElementType;
import com.intellij.psi.tree.TokenSet;
import org.antlr.intellij.adaptor.lexer.RuleIElementType;
import org.antlr.intellij.adaptor.parser.ANTLRParserAdaptor;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.tree.ParseTree;
import org.jetbrains.annotations.NotNull;
import org.setms.sew.antlr.SewParser;

/** A ParserDefinition implementation that uses the antlr4-intellij-adaptor. */
public class SewParserDefinition implements ParserDefinition {

  public static final IFileElementType FILE = new IFileElementType(SewLanguage.INSTANCE);

  // Build an array of rule element types (one for each rule in SewParser).
  private static final IElementType[] RULE_ELEMENT_TYPES;

  static {
    // SewParser.ruleNames should be generated by ANTLR, one per rule.
    String[] ruleNames = SewParser.ruleNames;
    RULE_ELEMENT_TYPES = new IElementType[ruleNames.length];
    for (int i = 0; i < ruleNames.length; i++) {
      RULE_ELEMENT_TYPES[i] = new RuleIElementType(i, ruleNames[i], SewLanguage.INSTANCE);
    }
  }

  @Override
  public @NotNull Lexer createLexer(Project project) {
    return new FlexAdapter(new SewLexer((java.io.Reader) null));
  }

  @Override
  public @NotNull PsiParser createParser(Project project) {
    // Pass the rule element types into the adaptor's constructor.
    return new ANTLRParserAdaptor(SewLanguage.INSTANCE, new SewParser(null)) {
      @Override
      protected ParseTree parse(Parser parser, IElementType root) {
        // Invoke the top-level rule ('sew') of your grammar.
        return ((SewParser) parser).sew();
      }
    };
  }

  @Override
  public @NotNull IFileElementType getFileNodeType() {
    return FILE;
  }

  @Override
  public @NotNull TokenSet getWhitespaceTokens() {
    return TokenSet.create(TokenType.WHITE_SPACE);
  }

  @Override
  public @NotNull TokenSet getCommentTokens() {
    return TokenSet.create(SewElementTypes.COMMENT);
  }

  @Override
  public @NotNull TokenSet getStringLiteralElements() {
    return TokenSet.create(SewElementTypes.STRING);
  }

  @Override
  public @NotNull PsiElement createElement(ASTNode node) {
    return new ASTWrapperPsiElement(node);
  }

  @Override
  public @NotNull PsiFile createFile(@NotNull FileViewProvider viewProvider) {
    String extension = viewProvider.getFileType().getDefaultExtension();
    return switch (extension) {
      case "decision" -> new DecisionFile(viewProvider);
      case "useCase" -> new UseCaseFile(viewProvider);
      default -> throw new UnsupportedOperationException("Unknown file extension: " + extension);
    };
  }

  @Override
  public @NotNull SpaceRequirements spaceExistenceTypeBetweenTokens(ASTNode left, ASTNode right) {
    return SpaceRequirements.MAY;
  }
}
