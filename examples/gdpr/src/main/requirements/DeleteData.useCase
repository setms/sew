package gdpr

useCase DeleteData {
    title       = "Delete data"
    description = "A user requests to delete their data."
}

scenario NonUserRequestsDataDeletion {
    elaborates = domainStory(NonuserCantDeleteData)
    steps       = [
        user(Nonuser),
        command(RequestDataDeletion),
        aggregate(Requests),
        event(RequestReceived),
        readModel(Requests),
        user(CustomerSupportAgent, reads=readModel(Users)),
        command(DenyRequest),
        aggregate(Requests),
        event(RequestDenied),
        readModel(Requests)
    ]
}

scenario LoggedOutUserRequestsDataDeletion {
    elaborates = domainStory(LoggedOutUserDeletesData)
    steps       = [
        user(User),
        command(RequestDataDeletion),
        aggregate(Requests),
        event(RequestReceived),
        readModel(Requests),
        user(CustomerSupportAgent, reads=readModel(Users)),
        command(StartRequest),
        aggregate(Requests),
        event(RequestStarted),
        readModel(Requests)
    ]
}

scenario LoggedInUserRequestsDataDeletion {
    elaborates = domainStory(LoggedInUserRequestsDataDeletion)
    steps      = [
        user(User),
        externalSystem(App),
        command(StartRequest),
        aggregate(Requests),
        event(RequestStarted),
        readModel(Requests)
    ]
}

scenario InstructServicesToDeleteUserData {
    elaborates = domainStory(AllServicesDeleteDataAboutTheUser)
    steps      = [
        event(RequestStarted, updates=readModel(Requests)),
        policy(FanOut, reads=readModel(Services)),
        command(StartServiceRequest),
        aggregate(Services),
        event(ServiceRequestStarted, updates=readModel(ServiceRequests)),
        policy(CallService),
        command(HandleRequest),
        externalSystem(Service),
        event(ServiceRequestFinished, updates=readModel(ServiceRequests)),
        policy(FanIn, reads=readModel(ServiceRequests)),
        command(FinishRequest),
        aggregate(Requests),
        event(RequestFinished),
        readModel(Requests)
    ]
}

scenario ServiceDoesntDeleteDataInTime {
    title       = "Service doesn't delete data in time"
    description = "A service doesn't confirm within the allotted time period that it has deleted the user's data. The system sends a reminder."
    steps       = [
        clockEvent(TimePassed),
        policy(CallService, reads=readModel(ServiceRequests)),
        command(HandleRequest),
        externalSystem(Service)
    ]
}

scenario InformUser {
    title = "Notify user that request is complete"
    steps = [
         event(RequestFinished),
         policy(NotifyUser),
         command(NotifyUser),
         aggregate(Notifications),
         event(UserNotified),
         readModel(Notifications),
         user(User)
    ]
}
