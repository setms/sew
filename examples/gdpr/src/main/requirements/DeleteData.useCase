package gdpr

useCase DeleteData {
    title       = "Delete data"
    description = "A user requests to delete their data."
}

scenario InvalidUserRequestsDataDeletion {
    title       = "Non-user requests data deletion"
    description = "When someone who's not a user of our applications requests data deletion, customer support denies the request."
    steps       = [
        user(User),
        command(RequestDataDeletion),
        aggregate(Requests),
        event(DataDeletionRequested),
        readModel(DataDeletionRequests),
        user(CustomerSupport, reads=readModel(Users)),
        command(DenyDataDeletionRequest),
        aggregate(Requests),
        event(DataDeletionDenied),
        readModel(DataDeletionRequests)
    ]
}

scenario UnknownUserRequestsDataDeletion {
    title       = "Unknown user requests data deletion"
    description = "A user who isn't logged in to one of our apps requests deletion of their data."
    steps       = [
        user(User),
        command(RequestDataDeletion),
        aggregate(Requests),
        event(DataDeletionRequested),
        readModel(DataDeletionRequests),
        user(CustomerSupport, reads=readModel(Users)),
        command(DeleteUserData),
        aggregate(Requests),
        event(DataDeletionStarted),
        readModel(DataDeletionRequests)
    ]
}

scenario LoggedInUserRequestsDataDeletion {
    title       = "Logged in user requests data deletion"
    description = "A user who is logged in to one of our apps requests deletion of their data."
    steps       = [
        user(User),
        externalSystem(App),
        command(DeleteUserData),
        aggregate(Requests),
        event(DataDeletionStarted)
    ]
}

scenario InstructServicesToDeleteUserData {
    title       = "All services delete the user's data"
    description = "The system instructs all services to delete the user's data and waits for them to confirm they did."
    steps       = [
        event(DataDeletionStarted, updates=readModel(DataDeletionRequests)),
        policy(CheckRequests, reads=readModel(Services)),
        command(StartDeletionByServices),
        aggregate(Services),
        event(ServiceDeletionStarted, updates=readModel(RequestsInProgress)),
        policy(CheckServices),
        command(ServiceDeleteUserData),
        externalSystem(Service),
        event(ServiceDeletedUserData),
        policy(CheckProgress, reads=readModel(RequestsInProgress)),
        command(CompleteDataDeletion),
        aggregate(Requests),
        event(UserDataDeleted, updates=readModel(RequestsInProgress)),
        readModel(DataDeletionRequests)
    ]
}

scenario ServiceDoesntDeleteDataInTime {
    title       = "Service doesn't delete data in time"
    description = "A service doesn't confirm within the allotted time period that it has deleted the user's data. The system sends a reminder."
    steps       = [
        clockEvent(TimePassed),
        policy(CheckServices, reads=readModel(RequestsInProgress)),
        command(ServiceDeleteUserData),
        externalSystem(Service)
    ]
}

scenario InformUser {
    title = "Notify user that request is complete"
    steps = [
         event(UserDataDeleted),
         policy(CheckNotifications),
         command(NotifyUser),
         aggregate(Notifications),
         event(UserNotified),
         readModel(Notifications),
         user(User)
    ]
}
