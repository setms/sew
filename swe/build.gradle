plugins {
    id 'antlr'
    alias libs.plugins.lombok
    alias libs.plugins.pitest
    alias libs.plugins.spotless
}

dependencies {
    antlr libs.bundles.antlr

    implementation project(':km')

    implementation libs.bundles.antlr.runtime
    implementation libs.bundles.classgraph
    implementation libs.bundles.language
    implementation libs.bundles.slf4f
    implementation libs.bundles.validation
    implementation libs.bundles.visualization

    runtimeOnly libs.bundles.validation.runtime

    testImplementation libs.bundles.junit
    testImplementation libs.bundles.yaml

    testRuntimeOnly libs.bundles.junit.runtime
}

def antlrDir = file("src/main/antlr")
def langDir = layout.buildDirectory.dir("generated-src")
def langPackageDir = langDir.map { it.dir("org/setms/sew/lang") }

antlrDir.listFiles(new FilenameFilter() {
    boolean accept(File dir, String name) {
        return name.endsWith(".g4")
    }
})?.each { File grammarFile ->
    def baseName = grammarFile.name[0..-4] // strip extension
    def taskName = "generate${baseName}Parser".toString()
    def subDir = baseName.toLowerCase()
    def packageName = "org.setms.sew.lang.$subDir".toString()

    tasks.register(taskName, AntlrTask) {
        description = "Generates parser for ${grammarFile.name}"
        group = "antlr"
        source = fileTree(antlrDir) {
            include grammarFile.name
        }
        outputDirectory = langPackageDir.map { it.dir(subDir) }.get().asFile
        arguments += ['-package', packageName]
    }

    tasks.named("compileJava").configure {
        dependsOn(taskName)
    }
}

sourceSets {
    main {
        java {
            srcDir langDir
        }
    }
}

tasks.named('generateGrammarSource') {
    enabled = false
}

def userHomeDir = System.properties['user.home']
def pitestHistoryFilePath = "${userHomeDir}/.pitest/cache/${project.group}.${project.name}.${project.version}_pitest_history.bin"
// ensure mutation tests run during build process both locally and in pipeline
check.dependsOn 'pitest'
pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '1.2.1'
    // mutationThreshold should be increased as tests are refactored with an ultimate goal of 80% or higher
    mutationThreshold = 70
    // withHistory is not used in order to have explicit control over the location to enable caching w/in the CI/CD pipeline
    historyInputLocation = pitestHistoryFilePath
    historyOutputLocation = pitestHistoryFilePath
    features = ["+auto_threads"]
    // Exclude generated classes and Spring config from mutation testing as both are better suited for end-to-end and/or narrow integration tests
    // DO NOT add to this list.
    excludedClasses = ["*.generated.*", "*.config.*"]
    excludedTestClasses = [ 'org.setms.swe.e2e.EndToEndTest' ]
    useClasspathFile = true

    // NEGATE_CONDITIONALS times out
    mutators = ['INVERT_NEGS', 'MATH', 'VOID_METHOD_CALLS', 'CONDITIONALS_BOUNDARY', 'INCREMENTS', 'TRUE_RETURNS',
                'FALSE_RETURNS', 'PRIMITIVE_RETURNS', 'EMPTY_RETURNS', 'NULL_RETURNS']
}
tasks.named('pitest') {
    dependsOn test
}
