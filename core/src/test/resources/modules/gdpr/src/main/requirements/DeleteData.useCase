package gdpr

useCase DeleteData {
    title       = "Delete data"
    description = "A user requests to delete their data."
}

scenario LoggedInUserRequestsDataDeletion {
    title       = "Logged in user requests data deletion"
    description = "A user who is logged in to one of our apps requests deletion of their data."
    steps       = [
        user(User),
        externalSystem(App),
        command(DeleteMyData),
        aggregate(Services),
        event(DataDeletionStarted, updates = readModel(DataDeletionRequests)),
        policy(CheckServices, reads = readModel(DataDeletionRequests)),
        command(DeleteDataFromService),
        aggregate(Services),
        event(DataDeletionFromServiceRequested),
        externalSystem(Service),
        event(DataDeletedInService),
        policy(CheckRequestComplete, reads = readModel(DataDeletionRequests)),
        command(InformUser),
        aggregate(Notifications),
        event(DataDeleted),
        readModel(DataDeletionCompletion),
        user(User)
    ]
}

scenario UnknownUserRequestsDataDeletion {
    title       = "Unknown user requests data deletion"
    description = "A user who isn't logged in to one of our apps requests deletion of their data."
    steps       = [
        user(User),
        command(DeleteMyData),
        aggregate(DataDeletionRequestForm),
        event(DataDeletionRequested),
        readModel(DataDeletionRequests),
        user(CustomerSupport),
        policy(CheckUserIdentity),
        command(DataDeletionRequestedInService),
        externalSystem(Service),
        event(DataDeletedInService),
        policy(CheckRequestComplete),
        command(InformUser),
        aggregate(Notifications),
        event(DataDeleted),
        readModel(DataDeletionCompletion),
        user(User)
    ]
}

scenario ServiceDoesntDeleteDataInTime {
    title       = "Service doesn't delete data in time"
    description = "A service doesn't respond within the allotted time period that it has deleted the user's data. The system sends a reminder."
    steps       = [
        clockEvent(ServiceDeletionTimeOut),
        policy(CheckUnresponsiveService),
        command(RemindService),
        aggregate(Services),
        event(DataDeletionRequestedInService),
        externalSystem(Service),
        event(DataDeletedInService),
        policy(CheckRequestComplete),
        command(InformUser),
        aggregate(Notifications),
        event(DataDeleted),
        readModel(DataDeletionCompletion),
        user(User)
    ]
}

scenario ServicesRemainsUnresponsive {
    title       = "Service remains unresponsive"
    description = "A services remains unresponsive despite several reminders. The system gives up on the request and manual intervention is required."
    steps       = [
        clockEvent(ServiceDeletionTimeOut),
        policy(CheckUnresponsiveService),
        command(GiveUpOnUnresponsiveService),
        aggregate(Services),
        event(DataDeletionInServiceAborted),
        readModel(AbortedDataDeletions),
        user(CustomerSupport)
    ]
}
