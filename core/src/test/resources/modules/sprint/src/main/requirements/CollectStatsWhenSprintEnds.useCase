package velocityehs

useCase CollectStatsWhenSprintEnds {
    title = "Collect statistics when the sprint ends"
}

scenario NewSprintHasStarted {
    title       = "New sprint has started"
    description = "The periodically running workflow detects that a new sprint has started and collects statistics for it."
    steps       = [
        clockEvent(TimePassed),
        policy(CheckActiveSprint, reads = readModel(ActiveSprints)),
        command(EndSprint),
        aggregate(Sprint),
        event(SprintFinalized, updates = readModel(ActiveSprints)),
        policy(CheckApproval),
        command(RequestApproval),
        aggregate(Approval),
        event(ApprovalRequested)
    ]
}

scenario SameSprintIsActive {
    title       = "The same sprint is active as last time"
    description = "The periodically running workflow detects that the currently active sprint is the same as last time and does nothing."
    steps       = [
        clockEvent(TimePassed),
        policy(CheckActiveSprint, reads = readModel(ActiveSprints))
    ]
}
